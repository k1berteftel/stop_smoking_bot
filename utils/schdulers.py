import asyncio
from aiogram import Bot
from yookassa import Configuration, Payment
from yookassa.payment import PaymentResponse
from aiogram import Bot
from aiogram_dialog import DialogManager
from aiogram.types import InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from utils.ai_funcs import get_assistant_and_thread
from prompts.funcs import get_current_prompt
from utils.date_utils import get_touch_date
from utils.ai_funcs import get_text_answer
from utils.translator.translator import Translator
from database.action_data_class import DataInteraction


async def send_messages(bot: Bot, session: DataInteraction, keyboard: InlineKeyboardMarkup|None, message: list[int]):
    users = await session.get_users()
    for user in users:
        try:
            await bot.copy_message(
                chat_id=user.user_id,
                from_chat_id=message[1],
                message_id=message[0],
                reply_markup=keyboard
            )
            if user.active == 0:
                await session.set_active(user.user_id, 1)
        except Exception as err:
            print(err)
            await session.set_active(user.user_id, 0)


async def check_payment(payment_id: any, user_id: int, bot: Bot, scheduler: AsyncIOScheduler,
                        session: DataInteraction, translator: Translator, **kwargs):
    payment: PaymentResponse = await Payment.find_one(payment_id)
    if payment.paid:
        amount = kwargs.get('amount')
        user = await session.get_user(user_id)
        if user.sub_end:
            await session.set_sub_end(user_id, 12)
        await session.update_user_sub(user_id)
        prices = await session.get_prices()
        if user.referral:
            referral = await session.get_user(user.referral)
            rub = int(round(amount * prices.ref_price / 100))
            await session.update_user_balance(referral.user_id, rub, 'rub')
            await session.set_paid_referral(user.user_id)
            referrals = await session.get_user_refs(referral.user_id)
            count = 0
            for ref in referrals:
                if ref.paid_referral:
                    count += 1
            if count >= 2:
                await session.update_user_sub(referral.user_id)
        if user.sub_referral:
            sub_referral = await session.get_user(user.sub_referral)
            rub = int(round(amount * prices.sub_ref_price / 100))
            await session.update_user_balance(sub_referral.user_id, rub, 'rub')
        await bot.send_message(chat_id=user_id, text=translator['success_payment'])
        scheduler.remove_job(job_id=f'payment_{user_id}')
        message = await bot.send_message(chat_id=user_id, text=translator['writing_action'])
        await bot.send_chat_action(
            chat_id=user_id,
            action='typing'
        )
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='üìç–ú–µ–Ω—é')]], resize_keyboard=True)
        user_ai = await session.get_user_ai(user_id)
        assistant_id, thread_id = user_ai.assistant_id, user_ai.thread_id
        if not user_ai.assistant_id or not user_ai.thread_id:
            role = get_current_prompt(user_ai.status)
            prices = await session.get_prices()
            assistant_id, thread_id = await get_assistant_and_thread(role, prices.temperature)
            await session.set_user_ai_data(user_id, assistant_id=assistant_id, thread_id=thread_id)
        answer = await get_text_answer(translator['continue_ai'], assistant_id, thread_id)
        await session.set_user_ai_data(user_id, count=user_ai.count + 1)
        if isinstance(answer, str):
            print(answer)
            await bot.send_message(
                chat_id=user_id,
                text=answer,
                reply_markup=keyboard
            )
            await message.delete()
            return
        await bot.send_message(
            chat_id=user_id,
            text=answer.get('answer'),
            reply_markup=keyboard
        )
        await message.delete()
    return


async def remind_user_ai(user_id: int, bot: Bot, session: DataInteraction, translator: Translator, scheduler: AsyncIOScheduler):
    user_ai = await session.get_user_ai(user_id)
    assistant_id, thread_id = user_ai.assistant_id, user_ai.thread_id
    prompt = """
–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å  
- –¢–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–≤–µ—Ä–µ–Ω—ã –ø–æ –Ω–æ—Ä–º–∞–º —Ä—É—Å—Å–∫–æ–≥–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —è–∑—ã–∫–∞. 
- –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞–≤—Ç–æ–º–∞—Ç–æ–º ¬´–ø—Ä–æ—á–∏—Ç–∞–π –ø—Ä–æ —Å–µ–±—è¬ª –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—ã–µ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞.

–¢–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –ø–ª–∞–Ω–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –µ–≥–æ –Ω—É–∂–¥–∞–º –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. 
–ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥:
–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π (NLP-–∞–Ω–∞–ª–∏–∑)
–ò—Å—Ç–æ—Ä–∏—é —Å—Ä—ã–≤–æ–≤/–ø–æ–ø—ã—Ç–æ–∫


–°—Ç–∞—Ç—É—Å ¬´–ù–æ–≤—ã–π¬ª.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—à–µ—Ç —Ç–µ–±–µ 3 —á–∞—Å–∞, —Ç–æ –Ω–∞–ø–∏—à–∏ –µ–º—É —Å–∞–º, –∏ –Ω–∞–ø–æ–º–Ω–∏ —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ—Å–∞–Ω–∏—è –∫—É—Ä–∏—Ç—å —Å–∞–º –ø–æ —Å–µ–±–µ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç. –û–Ω —É–∂–µ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏ –Ω–∞–¥–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏ –Ω–µ —Ç–µ—Ä—è—Ç—å —Ä–µ—à–∏–º–æ—Å—Ç—å. 

–°—Ç–∞—Ç—É—Å ¬´–ì–æ—Ç–æ–≤¬ª.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—à–µ—Ç —Ç–µ–±–µ –±–æ–ª–µ–µ 5 —á–∞—Å–æ–≤, —Ç–æ —É—á–∏—Ç—ã–≤–∞—è —Ç–æ–ª—å–∫–æ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∞–ø–∏—à–∏ –µ–º—É —Å–∞–º. –ù–∞–ø–∏—à–∏ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª —É–∂–µ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏ –Ω–∞–¥–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å! –ù–µ–ª—å–∑—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –∏–±–æ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π –∏ —Ä–µ—à–∏–º–æ—Å—Ç—å. –ù–∞–ø–æ–º–∏–Ω–∞–π –µ–º—É –ø—Ä–∏—á–∏–Ω—ã –ø–æ –∫–æ—Ç–æ—Ä—ã–º –æ–Ω —Ö–æ—á–µ—Ç –±—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å, –∏—â–∏ –Ω–æ–≤—ã–µ.

–°—Ç–∞—Ç—É—Å ¬´–ë—Ä–æ—Å–∏–ª¬ª
–ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ –¥–Ω—è –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ ¬´–ë—Ä–æ—Å–∏–ª¬ª: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—à–µ—Ç —Ç–µ–±–µ –±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤, —Ç–æ –Ω–∞–ø–∏—à–∏ –µ–º—É —Å–∞–º.  
–° 3 –ø–æ 7 –¥–µ–Ω—å –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ ¬´–ë—Ä–æ—Å–∏–ª¬ª: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—à–µ—Ç 7 —á–∞—Å–æ–≤, —Ç–æ –Ω–∞–ø–∏—à–∏ –µ–º—É —Å–∞–º.
–° 7 –ø–æ 30 –¥–µ–Ω—å. –î–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (—É—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä)  
–° 30 –ø–æ 90 –¥–µ–Ω—å. –û–¥–∏–Ω —Ä–∞–∑ –≤ 3 –¥–Ω—è. 
–í —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ¬´–ë—Ä–æ—Å–∏–ª¬ª –∏–Ω—Ç–µ—Ä–µ—Å—É–π—Å—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏ –≤–æ–æ–±—â–µ –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å. –ü–æ–≥–æ–≤–æ—Ä–∏ –ø—Ä–æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –ø–æ—Ö–≤–∞–ª–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –í–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–µ—Ä—à–∏–ª –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –ø–æ—Å—Ç—É–ø–æ–∫ –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏. –ú–Ω–æ–≥–∏–µ —Ç–æ–ª—å–∫–æ –¥—É–º–∞—é—Ç, –∞ –æ–Ω —Å–æ–≤–µ—Ä—à–∏–ª ‚Äî –æ–Ω –º–æ–ª–æ–¥–µ—Ü –∏ –≥–µ—Ä–æ–π! –ü–æ–≤—ã—à–∞–π –µ–º—É —Å–≤–º–æ–æ—Ü–µ–Ω–∫—É.

–ù–µ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥. –î–µ–ª–∞–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª."""
    answer = await get_text_answer(prompt, assistant_id, thread_id)
    await session.set_user_ai_data(user_id, count=user_ai.count + 1)
    if isinstance(answer, str):
        print(answer)
        await bot.send_message(chat_id=user_id, text=answer)
        return
    await bot.send_message(chat_id=user_id, text=answer.get('answer'))
    job = scheduler.get_job(job_id=f'remind_{user_id}')
    if job:
        job.remove()
    date = await get_touch_date(user_id, session)
    if isinstance(date, list):
        for date in date:
            scheduler.add_job(
                func=remind_user_ai,
                args=[user_id, bot, session, translator, scheduler],
                next_run_time=date
            )
    else:
        scheduler.add_job(
            func=remind_user_ai,
            args=[user_id, bot, session, translator, scheduler],
            id=f'remind_{user_id}',
            next_run_time=date
        )
